<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Web service on GerkinDev Devblog</title>
    <link>https://gerkindev.github.io/devblog/tags/web-service/</link>
    <description>Recent content in Web service on GerkinDev Devblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Â©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 02:35:47 +0100</lastBuildDate>
    
        <atom:link href="https://gerkindev.github.io/devblog/tags/web-service/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Setup the cluster&#39;s internal router</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/03-router/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 16 Feb 2021 12:06:38 +0100</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/03-router/</guid>
        <description>References   https://github.com/traefik/traefik-helm-chart/pull/157/files    Start by creating traefik required resources. You can directly use resources from the &amp;nbsp;kubernetes/traefik templates: it does not contain variables. Those are taken from &amp;nbsp;traefik docs mixed up with &amp;nbsp;this PR for kubernetes 1.19 support and schemas.
 Please look forward for &amp;nbsp;this issue in traefik about official v1.19 support.
 Namespace Definitions Rbac IngressController Services  1 2 3 4 5  # File: .</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Networking</category>
            
          
            
              <category>Web service</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Make services reachable from the world</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/04-reverse-proxy/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 16 Feb 2021 12:06:38 +0100</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/04-reverse-proxy/</guid>
        <description>Now that you have a router installed, you have to pass requests on your server to it. This setup use a single entry point directly binding some ports on the host server.
1. Make a static and previsible configuration As you may have noticed in the step  &amp;nbsp;Kickstart the cluster, the metallb configuration use only dynamic adresses. But for the reverse proxy to work, we&amp;rsquo;ll need to be sure that our traefik router has a constant IP in your VPN.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Networking</category>
            
          
            
              <category>Web service</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Setup cluster&#39;s authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Tue, 16 Feb 2021 12:06:38 +0100</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/07-authentication/</guid>
        <description>Here is a graph of the RBAC setup we are going to implement:
1. Setup keycloak We&amp;rsquo;ll use keycloak to proxy our authentication for all monitors, using a single realm. You may use several realms in real-life situations. This is probably the tough part, and you may tweak heavily the following guide. Moreover, I may forgot to write some instructions, or somes are heavily linked to your very own setup.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>Protect monitoring with authentication</title>
        <link>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</link>
        <pubDate>Mon, 16 Nov 2020 02:35:47 +0100</pubDate>
        
        <atom:modified>Mon, 01 Feb 2021 16:42:59 +0100</atom:modified>
        <guid>https://gerkindev.github.io/devblog/walkthroughs/kubernetes/09-safe-monitoring/</guid>
        <description>Now that we have our authentication service up and running, we can protect our dashboards installed in the step &amp;nbsp;06 - Monitoring: See what is going on using our Keycloak OpenID Connect provider. Here is a diagram on how authorization will be managed:
Traefik dashboard Kibana Kube dashboard   References   https://itnext.io/protect-kubernetes-dashboard-with-openid-connect-104b9e75e39c    Again, we are going to set up a new instance of &amp;nbsp;louketo-proxy.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  apiVersion:apps/v1kind:Deploymentmetadata:name:gatekeepernamespace:kubernetes-dashboardlabels:app:kubernetes-dashboardcomponent:gatekeeperspec:replicas:1selector:matchLabels:app:kubernetes-dashboardcomponent:gatekeepertemplate:metadata:labels:app:kubernetes-dashboardcomponent:gatekeeperspec:containers:- name:keycloak-gatekeeperimage:&amp;#34;quay.</description>
        
        <dc:creator>GerkinDev</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
            
              <category>Sysadmin</category>
            
          
            
              <category>DevOps</category>
            
          
            
              <category>Web service</category>
            
          
            
              <category>Security</category>
            
          
            
              <category>Authentication</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>